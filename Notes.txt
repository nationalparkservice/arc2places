Notes to help me keep clear the various ways in which the state will be mutated.
I've listed the various operations/tasks/tools what have you, and identified the inputs/outputs
for each.

Seed Places:
  describe: Loads translated GIS data into the Places database.
  inputs: GIS dataset, translator, Places url/account*
  output: upload log (table) and modified places database
  notes: This should only be done once, but this is not enforced
         User should first compare GIS data to Place data to avoid duplication.
         Output (upload log) is required for syncing (Get Places Edits and Update Place described below)
         If you plan to use the GIS dataset in the future to update Place, you will need to enable editor tracking now

Edit Places:
  describe: Manual editing via id, or upload via JOSM, or other supported API tools
  inputs: Places url/account
  output: Modified places database

Edit GIS:
  describe: Manual editing via ArcMap or geoprocessing tools
  inputs GIS dataset (writable)
  output: modified GIS dataset
  notes: Editor tracking must be turned on for syncing to work

Get Places Edits:
  describe: Find changes in places within the unit/bbox since last upload, and applies the inverse translation
  inputs: places url/account, translator, date, unit or bounding box
  output: GISP dataset, Modified places database
  notes: The date could be null - get all changesets not loaded with arc2places.
         The date could be max date from the upload log, but this may miss some changes.
         TODO: how am a tracking if a change has been considered and/or dealt with?
         TODO: Figure out the format of the GISP - I Can't capture deletes in a new GIS feature class,
               applying changes to a copy of the GIS feature class is a problem since it has likely changed since the upload.

Reconcile Places Edits:
  describe: Add places edits to GIS and (maybe) reject/correct places edits to match GIS
  inputs: GIS dataset, GISP dataset, places url/account
  output: GIS dataset
  notes: This will be a manual process initially.
         TODO: Need to coordinate with format of GISP
         TODO: manually updating Places will not be necessary if we implement 'authoritive' users/changesets.
         new features in places that are NOT wanted will need to be manually deleted from places
         new features in places that are wanted can be copy/pasted to the GIS dataset
         updates in places that are NOT wanted will need to be manually corrected in places
         updates in places that are wanted will need to be copy/pasted, or posted to the GIS dataset
         deletes in places that are NOT wanted can be restored by bumping the edit data of the feature in GIS
         deletes in places that are wanted can be accepted by deleting the feature in GIS

Update Place:
  describe: Find changes in GIS since last upload, and send them to Places and update the upload log.
  inputs: GIS dataset with editor tracking, Places url/account, translator, upload log (writable)
  output: modified upload log and modified places database


* Places url defaults to: http://10.147.153.193/api/0.6/
* Places account defaults to the current Windows (AD) user.


Conclusion:
  Any feature class data can be used to seed Places. However there are caveats if the user wants to do syncing in the
  future.  i.e. shapefiles are not supported, and editor tracking (date_edited) must be enabled.  I can either test
  for those conditions and provide a warning, or I can put that in the documentation.  I will test for this when
  doing the sync.
  Actually, not all feature classes are valid, see validate() in placescore.py for a list of problems.
  I should still check these on upload/sync and report warnings/fails.  I do not need a separate tool for this
  I can remove the tool to init4places, and replace with the existing tool to add editor tracking


Workflows:

The following workflows are probable.  I do not know what workflow any unit will use.
I doubt all units will want the same workflow. There may be workflows I have not imagined.

1) Places Master
Unit sends ArcGIS data to NPMap team.
NPMap imports data into Places.
ArcGIS data is discarded or set to read only.
All updates for Unit data occur in Places editor.
If Unit data is needed in ArcGIS format it is extracted from Places.

2) GIS Master 1
Unit sends ArcGIS data to NPMap team.
NPMap imports data into Places.
Unit edits/maintains ArcGIS data.
Unit does not edit data in Places editor - edits in Places to features in Unit are ignored by Unit[1].
Unit periodically sends ArcGIS refresh to NPMap team.  NPMap purges and replaces Unit data in Places.
Any edits made in Places are lost.

3) GIS Master 2
Unit uploads ArcGIS data to Places
Unit saves the upload log, and enables ArcGIS editor tracking for change detection.
Unit does not edit data in Places editor - edits in Places to features in Unit are ignored by Unit[1].
Unit edits/maintains ArcGIS data.
Unit periodically uses upload log and editor tracking to calculate ArcGIS changes and pushes them to Places

4) Dual Master 1a
Process starts with workflow #1 or #2, but edits occur independently in both ArcGIS and Places.
Unit periodically compares data in Places and ArcGIS and manually reconciles the two systems
by adding/updating/deleting from the two systems to get them back into sync.

5) Dual Master 1b
Process starts with workflow #1 or #2, but edits occur independently in both ArcGIS and Places.
Unit periodically sends ArcGIS data to NPMap team.
NPMap team manually or with tools yet to be developed updates Places with ArcGIS data.[2]
Unit periodically reviews Places for changes and manually or with tools yet to be developed updates ArcGIS data.

6) Dual Master 2
Process starts with workflow #3, but edits occur independently in both ArcGIS and Places.
Unit periodically pulls changes in Places data and manually or with tools yet to be developed updates ArcGIS data.
Unit uses process in workflow #3 to push ArcGIS changes to Places

7) Dual Master 3)
Process starts with Workflow #1, 2, or 3, but edits occur independently in both ArcGIS and Places.
ArcGIS and Places diverge.
They are maintained independently and are never reconciled.[3]

I am providing tools to support workflow #3, with the goal of also supporting workflow #6

[1] NPMap team may not ignore these edits, and they may appear in public NPMap products like Park Tiles or CartoDB
[2] NPMap team would need to agree to this additional workload.
[3] While this is duplicative, it may not be bad as the two systems have different needs and purposes.



Goals:
 Should work from a suite of command line commands as well as Arc Toolbox tools
   places.pyt, configures/validates the arcpy.parameters for input to modules
     Info, warning and errors use arcpy commnds
   commandline scripts use optparse to configure the command line options and arguments
     info, warning and errors print to standard output
      to support this, pass a logger to all classes and functions,
      logger should have three methods, AddInfo, AddWarning, AddError, so arcpy is a logger,
       and a simple class with these three methods sending input to stdout (via print) works for cmd line tools
 Should work from Mac and PC (On Mac use ogr, on PC, use ogr or arcpy)
 Should work with any OSM API server, including Places (special authentication)

